// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime @default(now())

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    plans         Plan[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Exercise {
    id            String               @id @default(cuid())
    equipment     Equipment?           @relation(fields: [equipmentId], references: [id])
    equipmentId   String?
    targetMuscles MusclesOnExercises[]
    workouts      Workout[]
}

model Muscle {
    id        String               @id @default(cuid())
    name      String
    exercises MusclesOnExercises[]
    group     MuscleGroup
}

enum MuscleGroup {
    CHEST
    BACK
    ARMS
    ABDOMINALS
    LEGS
    SHOULDERS
}

model MusclesOnExercises {
    exercise   Exercise @relation(fields: [exerciseId], references: [id])
    exerciseId String
    muscle     Muscle   @relation(fields: [muscleId], references: [id])
    muscleId   String

    @@id([exerciseId, muscleId])
}

model Equipment {
    id        String     @id @default(cuid())
    name      String
    exercises Exercise[]
}

model Plan {
    id       String    @id @default(cuid())
    name     String
    day      Day
    notes    String
    workouts Workout[]
    user     User      @relation(fields: [userId], references: [id])
    userId   String
}

model Workout {
    id         String   @id @default(cuid())
    plan       Plan     @relation(fields: [planId], references: [id])
    planId     String
    exercise   Exercise @relation(fields: [exerciseId], references: [id])
    exerciseId String
    reps       Int
    sets       Int
    weight     Float?
}

enum Day {
    SUNDAY
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
}
